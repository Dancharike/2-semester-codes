#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;
struct Student {
    string name;
    string id;
    int age;
    string major;
    double average_mark;
    string study_contract_status; // "Free" or "Paid"
};

// Function to perform linear search
int linearSearch(const vector<Student>& students, const string& key) {
    for (size_t i = 0; i < students.size(); ++i) {
        if (students[i].name == key || students[i].id == key || students[i].major == key) {
            return i; // Return index if found
        }
    }
    return -1; // Return -1 if not found
}

// Function to perform binary search (assuming students are sorted)
int binarySearch(const vector<Student>& students, const string& key) {
    int low = 0;
    int high = students.size() - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (students[mid].name == key || students[mid].id == key || students[mid].major == key) {
            return mid; // Return index if found
        } else if (students[mid].name < key || students[mid].id < key || students[mid].major < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1; // Return -1 if not found
}

// Function to display student details
void displayStudent(const Student& student) {
    cout << "Name: " << student.name << ", ID: " << student.id << ", Age: " << student.age << ", Major: " << student.major << ", Average Mark: " << student.average_mark << ", Study Contract Status: " << student.study_contract_status << endl;
}

// Function to display search results
void displaySearchResults(const vector<Student>& students, const string& key) {
    int index = linearSearch(students, key); // Perform linear search
    if (index != -1) {
        cout << "Linear Search Result:" << endl;
        displayStudent(students[index]);
    } else {
        cout << "Student not found using linear search." << endl;
    }

    index = binarySearch(students, key); // Perform binary search
    if (index != -1) {
        cout << "Binary Search Result:" << endl;
        displayStudent(students[index]);
    } else {
        cout << "Student not found using binary search." << endl;
    }
}

// Function to sort students by name
void sortByName(vector<Student>& students) {
    sort(students.begin(), students.end(), [](const Student& a, const Student& b) {
        return a.name < b.name;
    });
}

// Function to sort students by ID
void sortById(vector<Student>& students) {
    sort(students.begin(), students.end(), [](const Student& a, const Student& b) {
        return a.id < b.id;
    });
}

// Function to sort students by age
void sortByAge(vector<Student>& students) {
    sort(students.begin(), students.end(), [](const Student& a, const Student& b) {
        return a.age < b.age;
    });
}

int main() {
    // Sample data with Lithuanian names
    vector<Student> students = {
            {"Jonas", "S001", 20, "Computer Science", 8.5, "Paid"},
            {"Marius", "S002", 21, "Engineering", 7.9, "Free"},
            {"Giedre", "S003", 19, "Mathematics", 9.1, "Paid"},
            {"Lukas", "S004", 22, "Psychology", 8.0, "Paid"},
            {"Karolina", "S005", 20, "Biology", 8.7, "Free"},
            {"EglÄ—", "S006", 23, "Chemistry", 8.2, "Paid"},
            {"Simonas", "S007", 21, "Computer Engineering", 7.5, "Free"},
            {"Viktorija", "S008", 20, "Economics", 8.9, "Paid"},
            {"Tomas", "S009", 22, "Political Science", 8.3, "Paid"},
            {"Ieva", "S010", 21, "Sociology", 8.6, "Free"}
    };

    // Display original student database
    cout << "Original Student Database:" << endl;
    for (const auto& student : students) {
        displayStudent(student);
    }
    cout << endl;

    // Search example
    string searchKey = "S006";
    cout << "Searching for student with name/ID/major: " << searchKey << endl;
    displaySearchResults(students, searchKey);
    cout << endl;

    // Sort example
    cout << "Sorting students by name:" << endl;
    sortByName(students);
    for (const auto& student : students) {
        displayStudent(student);
    }
}

